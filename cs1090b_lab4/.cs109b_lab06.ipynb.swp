{
    "metadata": {
        "kernelspec": {
            "name": "python3",
            "display_name": "Python 3 (ipykernel)",
            "language": "python"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 5,
    "cells": [
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# \u003cimg style=\"float: left; padding-right: 10px; width: 45px\" src=\"https://raw.githubusercontent.com/Harvard-IACS/2018-CS109A/master/content/styles/iacs.png\"\u003e CS1090B Introduction to Data Science\n",
                "\n",
                "## Lab 4:  Feed Forward Neural Networks - Optimizers \n",
                "\n",
                "**Harvard University**\u003cbr/\u003e\n",
                "**Spring 2025**\u003cbr/\u003e\n",
                "**Instructors**: Pavlos Protopapas, Natesh Pillai, an\u003cbr/\u003e\n",
                "\u003cbr/\u003e"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Table of Contents\n",
                "- Keras Functional API\n",
                "- Weight Initializers \n",
                "- Optimizers\n",
                "    - SGD\n",
                "    - Adagrad\n",
                "    - RMProp\n",
                "    - Adam\n",
                "- Image Classifier Example"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "import copy\n",
                "import operator\n",
                "import os\n",
                "import matplotlib.pyplot as plt\n",
                "import numpy as np\n",
                "import pandas as pd\n",
                "from PIL import Image\n",
                "import random as rn\n",
                "import seaborn as sns\n",
                "from sklearn.linear_model import LinearRegression\n",
                "from sklearn.metrics import mean_squared_error, r2_score\n",
                "from sklearn.model_selection import train_test_split\n",
                "from sklearn.preprocessing import PolynomialFeatures\n",
                "import tensorflow as tf\n",
                "\n",
                ""
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# You can adjust the notebook width if you like\n",
                "from IPython.display import display, HTML\n",
                "display(HTML(\"\u003cstyle\u003e.container { width:75% !important; }\u003c/style\u003e\"))"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Recite the sacred reproducibility incantation üôè\n",
                "os.environ['PYTHONHASHSEED'] = '0'\n",
                "os.environ['CUDA_VISIBLE_DEVICES'] = ''\n",
                "tf.random.set_seed(109)\n",
                "np.random.seed(109)\n",
                "rn.seed(109)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Regression with Neural Networks\n",
                "\n",
                "Let's fit a difficult function where polynomial regression fails. \n",
                "\n",
                "The [dielectric function](https://en.wikipedia.org/wiki/Permittivity) of many optical materials depends on the frequency and is given by the Lorentz model as:\n",
                "$$ \\varepsilon(\\omega) = 1 - \\frac{\\omega_0^2}{\\omega_0^2-\\omega^2 +i\\omega\\Gamma},$$\n",
                "where $\\omega$ is the frequency, $\\omega_0$ is the resonance frequency of the bound electrons, and $\\Gamma$ is the electron damping. \n",
                "\n",
                "In many situations, we measure the real part of the dielectric function in the lab and then we fit these observations. Let's assume that we perform an experiment and the observations came from a Lorentz model."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "df = pd.read_csv('data/lorentz_set.csv').sample(frac=1, random_state=109) # shuffle DataFrame!\n",
                "\n",
                "# Split train and test\n",
                "x_train, x_test, y_train, y_test = train_test_split(df.x, df.y, train_size=0.7, random_state=109)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "def plot_lorentz(df, test_idx, ax=None):\n",
                "    if ax is None:\n",
                "        ax = plt.gca()\n",
                "    train_mask = np.ones(df.shape[0], dtype=bool)\n",
                "    train_mask[test_idx] = False\n",
                "    ax.scatter(df.x[train_mask],df.y[train_mask], c='b', label='train data')\n",
                "    ax.scatter(df.x[~train_mask],df.y[~train_mask], c='orange', marker='^', label='test data')\n",
                "    ax.set_xlabel('$\\omega$')\n",
                "    ax.set_ylabel('$\\epsilon$')\n",
                "    ax.legend()\n",
                "\n",
                "plt.figure(figsize = (12,5));\n",
                "plot_lorentz(df, x_test.index);"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Fit a 25-degree polynomial function to the data\n",
                "polynomial_features= PolynomialFeatures(degree=25)\n",
                "x_poly_train = polynomial_features.fit_transform(x_train.values.reshape(-1,1))\n",
                "x_poly_test = polynomial_features.fit_transform(x_test.values.reshape(-1,1))\n",
                "\n",
                "model = LinearRegression()\n",
                "model.fit(x_poly_train, y_train)\n",
                "y_poly_train = model.predict(x_poly_train)\n",
                "y_poly_test = model.predict(x_poly_test)\n",
                "\n",
                "mse_train_poly = mean_squared_error(y_train, y_poly_train)\n",
                "mse_test_poly = mean_squared_error(y_test, y_poly_test)\n",
                "print('MSE on training set: ', mse_train_poly)\n",
                "print('MSE on testing set: ', mse_test_poly)\n",
                "\n",
                "x_lin = np.linspace(x_train.min(), x_train.max(), 1000)\n",
                "x_lin_poly = polynomial_features.fit_transform(x_lin.reshape(-1,1))\n",
                "y_poly_pred = model.predict(x_lin_poly)\n",
                "\n",
                "plt.figure(figsize = (12,5))\n",
                "ax = plt.gca()\n",
                "ax.plot(x_lin, y_poly_pred, color='m',linewidth=2,label='polynomial model train')\n",
                "plot_lorentz(df, x_test.index, ax=ax);\n",
                "\n",
                "ax.set_title(\"The Lorentz Equation: Polynomial Fit, $R^2$ score ={}\".format(round(r2_score(y_train,y_poly_train),4)));"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "As expected, we get some wile behavior because we need a very high polynomial degree to begin to approximate this function.\\\n",
                "\n",
                "Let's see if we can do better using a **feed forward neural network**. We'll again be using Tensorflow's high-level Keras API. But this time we'll construct our NNs a bit differently..."
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Keras Functional API"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "from tensorflow import keras\n",
                "from tensorflow.keras.layers import Input, Dense\n",
                "from tensorflow.keras.models import Model"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "[Official Keras Guide](https://keras.io/guides/functional_api/)\n",
                "\n",
                "The Keras functional API is a way to create models that are more flexible than the `tf.keras.Sequential API`. The functional API can handle models with non-linear topology, shared layers, and even multiple inputs or outputs.\n",
                "\n",
                "The main idea is that a deep learning model is usually a directed acyclic graph (DAG) of layers. So the functional API is a way to build graphs of layers."
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "You create a node in the graph by instantiating a layer object. A directed connection is created between nodes by passing one node as input to another:\n",
                "```{python}\n",
                "inputs = Dense(...)\n",
                "hidden1 = Dense(...)(inputs)\n",
                "hidden2 = Dense(...)(hidden1)\n",
                "output = Dense(...)(hidden2)\n",
                "```\n",
                "The model is created with the `tf.keras.Model` constructor, which requires args `inputs` and `outputs`, defining where the graph begins and where it ends.\n",
                "```{python}\n",
                "model = tf.keras.Model(inputs=inputs, outputs=outputs)\n",
                "```\n",
                "\n",
                "This flexibility allows you to have forking and merging paths in your network. We'll see more complex graph structures like later in the course!"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Read the input data into your neural network\n",
                "inputs = Input(shape=(1,))\n",
                "\n",
                "# Pass the data through two densely-connected layers, with hyperbolic tangent activations\n",
                "# your code here\n",
                "\n",
                "# Output your predicted y-values, using linear activation\n",
                "# your code here\n",
                "\n",
                "# Instantiate your model and name it 'NN1'\n",
                "# your code here\n",
                "\n",
                "NN1.save_weights('NN1_init.h5')\n",
                "NN1.summary() # shows the model configuration"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Weight Initilizers\n",
                "\n",
                "[`tf.keras.initializers`](https://keras.io/api/layers/initializers/)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "from tensorflow.keras import initializers\n",
                "from tensorflow.keras.initializers import glorot_normal, glorot_uniform, he_uniform, random_normal"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The keyword arguments used for passing initializers to layers depends on the layer. Usually, it is simply `kernel_initializer` and `bias_initializer`.\n",
                "\n",
                "As we've already seen with Keras objects like optimizers, losses, and metrics, all built-in initializers can also be passed via their string identifier (though this requires that you accept their default parameters if they have any)."
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The standard initializers you might expect are:\n",
                "- Normal\n",
                "- Truncated Normal\n",
                "- Uniform\n",
                "- Ones\n",
                "- Zeros\n",
                "\n",
                "Some more exotic initializers include:\n",
                "- Glorot (a.k.a Xavier) normal initializer\n",
                "    - Draws samples from a truncated normal distribution centered on 0 with `stddev = sqrt(2 / (fan_in + fan_out))` where `fan_in` is the number of input units in the weight tensor and `fan_out` is the number of output units in the weight tensor.\n",
                "    - [Glorot et al., 2010](http://proceedings.mlr.press/v9/glorot10a.html)\n",
                "- Glorot (a.k.a. Xavier) uniform initializer\n",
                "    - Similar idea, except now the limits of the uniform are a function of `fan_in` and `fan_out`.Draws samples from a uniform distribution within `[-limit, limit]`, where `limit = sqrt(6 / (fan_in + fan_out))`.\n",
                "- HeNormal\n",
                "    - Just like Glorot normal except it only uses `fan_in`. Draws samples from a truncated normal distribution centered on 0 with `stddev = sqrt(2 / fan_in)`.\n",
                "    - [He et al., 2015](https://arxiv.org/abs/1502.01852)\n",
                "    \n",
                "- HeUniform\n",
                "    - Draws samples from a uniform distribution within `[-limit, limit]`, where `limit = sqrt(6 / fan_in)`. \n",
                "    \n",
                "As with everything (except possibly early stopping!) there is no free lunch here. The initializer is just another hyperparameter for you to experiment with. And they can indeed have an effect on your model's training, and therefore, its performance as well."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Helper function for plotting training history\n",
                "def plot_history(model, title=None, ax=None):\n",
                "    if ax is None:\n",
                "        ax = plt.gca()\n",
                "    ax.plot(model.history.history['loss'], label='train')\n",
                "    ax.plot(model.history.history['val_loss'], label='validation')\n",
                "    ax.set_xlabel('epoch')\n",
                "    ax.set_ylabel('MSE')\n",
                "    best_loss = np.nanmin(model.history.history['val_loss'])\n",
                "    ax.axvline(np.nanargmin(model.history.history['val_loss']),\n",
                "                c='k', ls='--',\n",
                "                label=f'best val loss = {best_loss:.2f}')\n",
                "    ax.legend()\n",
                "    ax.set_title(title)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Let's take a look at a few initializers and the resulting weight distributions in the first layer before and after training."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "%%time\n",
                "fig, axs = plt.subplots(4, 4, figsize=(16,10));\n",
                "kernal_initilizers = ['glorot_normal', 'glorot_uniform', 'he_uniform', 'random_normal']\n",
                "\n",
                "for i, kernel_initializer in enumerate(kernal_initilizers):\n",
                "    # Build Model\n",
                "    inputs = Input(shape=(1,))\n",
                "    x = Dense(200, activation='tanh', kernel_initializer=kernel_initializer)(inputs)\n",
                "    x = Dense(50, activation='tanh', kernel_initializer=kernel_initializer)(x)\n",
                "    x = Dense(5, activation='tanh', kernel_initializer=kernel_initializer)(x)\n",
                "    outputs = Dense(1, activation='linear', kernel_initializer=kernel_initializer)(x)\n",
                "    NN1 = Model(inputs=inputs, outputs=outputs, name='NN1')\n",
                "    # Compile\n",
                "    NN1.compile(tf.keras.optimizers.Adam(learning_rate=0.01), 'mse')\n",
                "    # Plot Initial Weights\n",
                "    first_layer_weights = NN1.get_weights()[0][0]\n",
                "    axs[i,2].hist(first_layer_weights, density=True)\n",
                "    sns.kdeplot(first_layer_weights, ax=axs[i,2])\n",
                "    axs[i,2].set_xlabel('weight')\n",
                "    axs[i,2].set_title('Initialization')\n",
                "    \n",
                "    # Fit\n",
                "    NN1.fit(x_train, y_train, \n",
                "            validation_data=(x_test, y_test),\n",
                "            batch_size=32,\n",
                "            epochs=100,\n",
                "            verbose=0)\n",
                "    # Plot\n",
                "    # History\n",
                "    plot_history(NN1, ax=axs[i,0], title=kernel_initializer)\n",
                "    \n",
                "    # Predictions\n",
                "    y_hat = NN1.predict(x_test)\n",
                "    mse = mean_squared_error(y_test, y_hat)\n",
                "    x_lin = np.linspace(df.x.min(), df.x.max(), (500)).reshape(-1,1)\n",
                "    y_hat_lin = NN1.predict(x_lin)\n",
                "    axs[i,1].plot(x_lin, y_hat_lin);\n",
                "    plot_lorentz(df, test_idx=x_test.index, ax=axs[i,1])\n",
                "    axs[i,1].set_title(f'Test MSE = {mse:.2f}')\n",
                "    \n",
                "    # Plot Weights after fitting\n",
                "    first_layer_weights = NN1.get_weights()[0][0]\n",
                "    axs[i,3].hist(first_layer_weights, density=True)\n",
                "    sns.kdeplot(first_layer_weights, ax=axs[i,3]);\n",
                "    axs[i,3].set_xlabel('weight')\n",
                "    axs[i,3].set_title('After Training')\n",
                "    \n",
                "fig.tight_layout();"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The distributions of the weights in the first layer after fitting seem to become multi-modal, with peaks on either side of 0. Why might this be the case?\n",
                "\n",
                "In any event, we can tell from the plots of the model predictions that we still have a lot of room for improvement. All these models seem to be **underfit**. More epochs could help, but let's first explore different options with our **optimizer**."
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Optimizers"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Recall that backpropogation uses the chain rule to calculate the gradient of the loss with respect to the weights. But it is gradient descent that actually updates the model weights. How this update is performe is defined by the optimizer."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "from tensorflow.keras import optimizers\n",
                "from tensorflow.keras.optimizers import SGD, Adagrad, RMSprop, Adam"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### **1. Stochastic Gradient Descent**\n",
                "\n",
                "[**SGD**](https://keras.io/api/optimizers/sgd/)\n",
                "\n",
                "https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/experimental/SGD\n",
                "\n",
                "Gradient descent optimizer.\n",
                "```{python}\n",
                "tf.keras.optimizers.SGD(\n",
                "    learning_rate=0.01,\n",
                "    momentum=0.0,\n",
                "    nesterov=False,\n",
                "    name=\"SGD\",\n",
                "    **kwargs\n",
                ")\n",
                "```\n",
                "\n",
                "For background on nesterov momentum: [Sutskever et al., 2013](http://jmlr.org/proceedings/papers/v28/sutskever13.pdf)\n",
                "\n",
                "In this optimizer, the gradients are averaged across all $m$ observations in a mini-batch.\n",
                "\n",
                "$g = \\frac{1}{m} \\sum_i \\nabla_W L(f(x_i; W), y_i)$\n",
                "\n",
                "- Note If the batch size is 1 (m=1), it would be stochastic gradient descent/SGD as shown on lecture notes.\n",
                "\n",
                "The comes the update step where the weights are actually adjusted.\n",
                "\n",
                "$W^* = W - \\eta g$\n",
                "\n",
                "Here, $\\eta$ is our learning rate.\n",
                "\n",
                "Because the gradient is calculated using a random sample (mini-batch), the it is a 'noisy' approximation which can allow us to escape local minima.\n",
                "\n",
                "\n",
                ""
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Here will start with the default parameters to the **SGD** optimizer."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {
                "scrolled": true
            },
            "outputs": [],
            "source": [
                "inputs = Input(shape=(1,))\n",
                "x = Dense(50, activation='tanh')(inputs)\n",
                "x = Dense(50, activation='tanh')(x)\n",
                "outputs = Dense(1, activation='linear')(x)\n",
                "NN1 = Model(inputs=inputs, outputs=outputs, name='NN1')\n",
                "NN1.save_weights('NN1_init.h5')\n",
                "NN1.summary()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {
                "scrolled": true
            },
            "outputs": [],
            "source": [
                "NN1.load_weights('NN1_init.h5')\n",
                "\n",
                "# Compile your model using a stochastic gradient descent optimizer with learning rate 0.01 and momentum 0\n",
                "# Use mean squared error loss\n",
                "# your code here\n",
                "\n",
                "# Fit the network on the training data\n",
                "NN1.fit(x_train, y_train, \n",
                "        validation_data=(x_test, y_test),\n",
                "        batch_size=32,\n",
                "        epochs=50,\n",
                "        verbose=0);"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "plot_history(NN1)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "When performing stochastic gradient descent, batch size is another hyperparameter. It is, after, what makes the optimizer \"stochastic!\" The smaller the batches, the noiser the approximations of the gradient. Below we try different batch sizes and compare."
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Note that rather than re-creating the original network each time, we simply load the weights that were stored upon initialization. Epoch number is enlarged to 200, since training with 50 epochs may not be enough based on the plot above."
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**Different Batch Size**\n",
                "\n",
                "Let's see what happens when using mini-batches of 1, 8, 32, and 128 training data points."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "%%time\n",
                "fig, axs = plt.subplots(2,2, figsize=(10,8), sharex=True, sharey=True)\n",
                "axs = axs.flatten()\n",
                "batch_sizes = [128, 32, 8, 1]\n",
                "for ax, batch_size in zip(axs, batch_sizes):\n",
                "    NN1.load_weights('NN1_init.h5')\n",
                "    NN1.compile(optimizer=SGD(learning_rate=0.01, momentum=0, nesterov=False),\n",
                "                loss='mse')\n",
                "\n",
                "    NN1.fit(x_train, y_train, \n",
                "            validation_data=(x_test, y_test),\n",
                "            batch_size=batch_size,\n",
                "            epochs=200,\n",
                "            verbose=0)\n",
                "    \n",
                "    plot_history(NN1, title=f'Batch Size = {batch_size}', ax=ax)\n",
                "plt.tight_layout()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**Summary**\n",
                "- batch size = 1: **vanilla SGD**. Just one example at a time to take a single step.\n",
                "- batch size = m: **mini-batch SGD**. Only the points in the mini batch to calculate the loss function.\n",
                "- batch size = all the data samples: **batch gradient descent**. "
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### 2. SGD with Adaptive Learning Rates\n",
                "**Learning Rate**\n",
                "\n",
                "Vanilla SGD has a fixed learning rate. Let's see how adjusting it as a hyperparameter affects the performance of our model."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "%%time\n",
                "fig, axs = plt.subplots(2,2, figsize=(10,8), sharex=True, sharey=True)\n",
                "axs = axs.flatten()\n",
                "lrs = [1e-4, 1e-3, 1e-2, 0.1]\n",
                "for ax, lr in zip(axs, lrs):\n",
                "    NN1.load_weights('NN1_init.h5')\n",
                "    NN1.compile(optimizer=SGD(learning_rate=lr, momentum=0),\n",
                "                loss='mse')\n",
                "\n",
                "    NN1.fit(x_train, y_train, \n",
                "            validation_data=(x_test, y_test),\n",
                "            batch_size=32,\n",
                "            epochs=200,\n",
                "            verbose=0)\n",
                "    \n",
                "    plot_history(NN1, title=f'Learning Rate = {lr}', ax=ax)\n",
                "plt.tight_layout()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Clearly some of these learning rates are too low, causing the loss to decrease very slowly as the weight updates are being scaled down considerably. The learning rate of 0.1 reaches a much lower loss, but it starts to oscillate wildly, apparently bouncing in and out of minima because of the high learning rate."
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**Learning rate decay / scheduling**\n",
                "\n",
                "You can use a learning rate schedule to modulate how the learning rate of your optimizer changes over time. You can find more info on schedulers in the [Keras documentation](https://keras.io/api/optimizers/learning_rate_schedules/)\n",
                "\n",
                "Here we will use [`ExponentialDecay`](https://keras.io/api/optimizers/learning_rate_schedules/exponential_decay/) to shrink the learning rate over the course of training."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "from tensorflow.keras.optimizers.schedules import ExponentialDecay"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Try an exponentially-decaying learning rate.\n",
                "# Use an initial learning rate of 0.1,\n",
                "# 100 decay steps,\n",
                "# and a 0.85 decay rate.\n",
                "# your code here\n",
                "lr_schedule = ... \n",
                "\n",
                "NN1.load_weights('NN1_init.h5')\n",
                "NN1.compile(optimizer=SGD(learning_rate=lr_schedule),\n",
                "            loss='mse')\n",
                "\n",
                "NN1.fit(x_train, y_train, \n",
                "        validation_data=(x_test, y_test),\n",
                "        batch_size=32,\n",
                "        epochs=400,\n",
                "        verbose=0);\n",
                "\n",
                "plot_history(NN1, title=f'Exponential LR Decay')"
            ]
        },
        {
            "attachments": {
                "image-2.png": {
                    "image/png": ""
                }
            },
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "[**Adagrad**](https://keras.io/api/optimizers/adagrad/)\n",
                "\n",
                "Adagrad is an optimizer with parameter-specific learning rates, which are adapted relative to how frequently a parameter gets updated during training. The more updates a parameter receives, the smaller the updates.\n",
                "\n",
                "![image-2.png](attachment:image-2.png)\n",
                "\n",
                "A weight's learning rate is inversely proportional to the root of its accumulated squared component of the gradient seen thus far.\n",
                "\n",
                "$r^*_i = r_i + g^2_i$\n",
                "\n",
                "$W^*_i = W_i - \\frac{\\epsilon}{\\delta + \\sqrt{r_i}}g_i$\n",
                "```{python}\n",
                "tf.keras.optimizers.Adagrad(\n",
                "    learning_rate=0.001,\n",
                "    initial_accumulator_value=0.1,\n",
                "    epsilon=1e-07,\n",
                "    name=\"Adagrad\",\n",
                "    **kwargs\n",
                ")\n",
                "```\n",
                "[Duchi et al., 2011](http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "NN1.load_weights('NN1_init.h5')\n",
                "\n",
                "# Compile the model with an adagrad optimizer with learning rate 0.01\n",
                "# your code here\n",
                "adagrad_optimizer = ... \n",
                "NN1.compile(optimizer=adagrad_optimizer, loss='mse')\n",
                "\n",
                "\n",
                "NN1.fit(x_train, y_train, \n",
                "        validation_data=(x_test, y_test),\n",
                "        batch_size=32,\n",
                "        epochs=200,\n",
                "        verbose=0)\n",
                "\n",
                "plot_history(NN1)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "As you can see, there is a problem with this approach. The accumulated gradients can quickly shrink the learning rates to the point where the network is not longer learning anything.\n",
                "\n",
                "But we have a fix for this!"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "---"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "[**RMSPromp**](https://keras.io/api/optimizers/rmsprop/)\n",
                "\n",
                "RMSprop maintains a moving (discounted) average of the square of gradients and divides the current gradient by the root of this average (RMS = root mean square).\n",
                "\n",
                "$r^*_i = \\rho r_i + (1-\\rho)g^2_i$\n",
                "\n",
                "$W^*_i = W_i - \\frac{\\epsilon}{\\delta + \\sqrt{r_i}}g_i$\n",
                "\n",
                "```{python}\n",
                "tf.keras.optimizers.RMSprop(\n",
                "    learning_rate=0.001,\n",
                "    rho=0.9,\n",
                "    momentum=0.0,\n",
                "    epsilon=1e-07,\n",
                "    centered=False,\n",
                "    name=\"RMSprop\",\n",
                "    **kwargs\n",
                ")\n",
                "```\n",
                "[Hinton, 2012](http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {
                "scrolled": true
            },
            "outputs": [],
            "source": [
                "NN1.load_weights('NN1_init.h5')\n",
                "NN1.compile(optimizer=RMSprop(learning_rate=0.01, rho=0.9, momentum=0.0),\n",
                "            loss='mse')\n",
                "\n",
                "NN1.fit(x_train, y_train, \n",
                "        validation_data=(x_test, y_test),\n",
                "        batch_size=32,\n",
                "        epochs=200,\n",
                "        verbose=0)\n",
                "\n",
                "plot_history(NN1)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "This works well, but can we also have it use information about the general trajectory or \"trend\"?"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "---"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### **3. SGD with Momentum**\n",
                "If we were to incorporate information about **past updates**, might that help us converge faster?"
            ]
        },
        {
            "attachments": {
                "image.png": {
                    "image/png": ""
                }
            },
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**Momentum**\n",
                "Momentum is the first method for using such past information in our updates. This helps us move along with the general trajectory we've taken so far, with oscillations cancelling themselves out.\n",
                "$$L(W)$$\n",
                "![image.png](attachment:image.png)\n",
                "\n",
                "Updates are made using a weighted average of the current gradient, $g$, and the average \"trend\" seen so far, $v$.\\\n",
                "$v = \\alpha v + (1-\\alpha)g$\n",
                "\n",
                "$W^* = W - \\eta v$"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "%%time\n",
                "fig, axs = plt.subplots(2,2, figsize=(10,8), sharex=True)\n",
                "axs = axs.flatten()\n",
                "lrs = [1e-4, 1e-3, 1e-2, 0.1]\n",
                "for ax, lr in zip(axs, lrs):\n",
                "    NN1.load_weights('NN1_init.h5')\n",
                "    NN1.compile(optimizer=SGD(learning_rate=lr, momentum=0.9, nesterov=False),\n",
                "                loss='mse')\n",
                "\n",
                "    NN1.fit(x_train, y_train, \n",
                "            validation_data=(x_test, y_test),\n",
                "            batch_size=32,\n",
                "            epochs=200,\n",
                "            verbose=0)\n",
                "    \n",
                "    plot_history(NN1, title=f'Learning Rate = {lr} + Momentum', ax=ax)\n",
                "plt.tight_layout()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "What happened in the 4th example above? Let's train again with those parameters and look at the detailed output from each epoch."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {
                "scrolled": true
            },
            "outputs": [],
            "source": [
                "# Inspect strange behavior in 4th plot above\n",
                "NN1.load_weights('NN1_init.h5')\n",
                "NN1.compile(optimizer=SGD(learning_rate=0.1, momentum=0.9, nesterov=False),\n",
                "            loss='mse')\n",
                "\n",
                "NN1.fit(x_train, y_train, \n",
                "        validation_data=(x_test, y_test),\n",
                "        batch_size=32,\n",
                "        epochs=15,\n",
                "        verbose=1)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "It looks like the combination of high learning rate and momentum caused a numerical overflow, likely from hitting very 'steep' parts of the loss surface. It is bad news once you get a `nan` in your computations. As you can see, the network weights have all become `nan` as well!"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {
                "scrolled": true
            },
            "outputs": [],
            "source": [
                "# Ouch! Numerical overflow did in our network\n",
                "NN1.get_weights()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "We take steps to prevent outcomes like this though."
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**Gradient Clipping**"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The Keras optimizers have clipping aguments 'hidden in the `*kwargs` designation of their docstrings.\n",
                "\n",
                "Here we use `clipnorm` prevent giant gradients (and thus giant weight updates) from causing problems."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {
                "scrolled": true
            },
            "outputs": [],
            "source": [
                "NN1.load_weights('NN1_init.h5')\n",
                "\n",
                "# Compile the neural network with an SGD optimizer with learning rate 0.1,\n",
                "# momentum 0.9,  and norm clipping 0.1.\n",
                "# your code here\n",
                "sgd_clipnorm = ... \n",
                "NN1.compile(optimizer=sgd_clipnorm, loss='mse')\n",
                "\n",
                "NN1.fit(x_train, y_train, \n",
                "        validation_data=(x_test, y_test),\n",
                "        batch_size=32,\n",
                "        epochs=200,\n",
                "        verbose=0);\n",
                "\n",
                "plot_history(NN1, title=f'LR=0.1; momentum=0.9; clipnorm=0.1')"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "---"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### **4. SGD with Adaptive Learning Rate + Momentum**"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "[**Adam**](https://keras.io/api/optimizers/adam/)\n",
                "\n",
                "Adam optimization is a stochastic gradient descent method that is based on adaptive estimation of first-order and second-order moments (Basically, momentum + RMSProp).\n",
                "```{python}\n",
                "tf.keras.optimizers.Adam(\n",
                "    learning_rate=0.001,\n",
                "    beta_1=0.9,\n",
                "    beta_2=0.999,\n",
                "    epsilon=1e-07,\n",
                "    amsgrad=False,\n",
                "    name=\"Adam\",\n",
                "    **kwargs\n",
                ")\n",
                "```\n",
                "[Kingma et al., 2014](http://arxiv.org/abs/1412.6980)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {
                "scrolled": true
            },
            "outputs": [],
            "source": [
                "NN1.load_weights('NN1_init.h5')\n",
                "# Instantiate the Adam optimizer with a learning rate of 0.01\n",
                "# your code here\n",
                "adam_opt = ...\n",
                "NN1.compile(optimizer=adam_opt, loss='mse')\n",
                "\n",
                "NN1.fit(x_train, y_train, \n",
                "        validation_data=(x_test, y_test),\n",
                "        batch_size=32,\n",
                "        epochs=200,\n",
                "        verbose=0)\n",
                "\n",
                "plot_history(NN1)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Very nice. Perhaps the lowest MSE we've seen so far. How does the fit look?"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "plot_lorentz(df, test_idx=x_test.index)\n",
                "ax = plt.gca()\n",
                "x_lin = np.linspace(df.x.min(), df.x.max(), (500)).reshape(-1,1)\n",
                "y_hat = NN1.predict(x_lin)\n",
                "ax.plot(x_lin, y_hat, c='m');"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Much better than our original polynomial model!"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "---"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**Other Optimizer Implementations Available in Keras:**\n",
                "- [**Adadelta**](https://keras.io/api/optimizers/adadelta/)\n",
                "    - Improvement on Adagrad. Adapts learning rates based on a moving window instead of accumulating all past gradients.\n",
                "- [**Adamax**](https://keras.io/api/optimizers/adamax/)\n",
                "    - Variant of Adam based on infinity norm (i.e., max).\n",
                "- [**Nadam**](https://keras.io/api/optimizers/Nadam/)\n",
                "    - Variant of Adam using nesterov momentum\n",
                "- [**Ftrl**](https://keras.io/api/optimizers/ftrl/)\n",
                "    - Implements the \"[Follow The Regularized Leader](https://research.google.com/pubs/archive/41159.pdf)\" algorithm."
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Overfitting"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "So far we've been looking at an oversimplified dataset where all the datapoints are right on top of the true generating function. But the real world is noisy!"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "df2 = pd.read_csv('data/lorentz_noise_set2.csv')\n",
                "df2 = df2.sample(frac=1, random_state=109) # shuffle DataFrame!\n",
                "x_train, x_test, y_train, y_test = train_test_split(df2.x, df2.y, train_size=0.7, random_state=109)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "plot_lorentz(df2, x_test.index)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "How does our previously best performing model fare on this more realistic dataset?"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {
                "scrolled": true
            },
            "outputs": [],
            "source": [
                "%%time\n",
                "inputs = Input(shape=(1,))\n",
                "x = Dense(50, activation='tanh')(inputs)\n",
                "x = Dense(50, activation='tanh')(x)\n",
                "outputs = Dense(1, activation='linear')(x)\n",
                "NN2 = Model(inputs=inputs, outputs=outputs)\n",
                "NN2.compile(optimizer=Adam(learning_rate=0.01, beta_1=0.9, beta_2=0.999),\n",
                "            loss='mse')\n",
                "\n",
                "NN2.fit(x_train, y_train, \n",
                "        validation_data=(x_test, y_test),\n",
                "        batch_size=32,\n",
                "        epochs=2000,\n",
                "        verbose=0)\n",
                "\n",
                "plot_history(NN2);"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "There are clear signs of overfitting as the validation error starts to diverge from the train error. Any \"improvement\" seen with respect to the training data after a certain point no longer generalizes. And after a while, we actually start to see the validation loss increasing."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Plot the overfit predictions\n",
                "plot_lorentz(df2, test_idx=x_test.index)\n",
                "ax = plt.gca()\n",
                "x_lin = np.linspace(df2.x.min(), df2.x.max(), (500)).reshape(-1,1)\n",
                "y_hat = NN2.predict(x_lin)\n",
                "ax.plot(x_lin, y_hat);"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "And here we can see the model predictions jump around as it tries to fit the sparse and noisy points in the training data.\\\n",
                "Luckily we have several tools at our disposal for addressing overfitting in neural networks... to be continued!"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Image Classification with a Feedforward Neural Networks\n",
                "\n",
                "In this section of the lab we will be working with the [Fashion-MNIST dataset](https://github.com/zalandoresearch/fashion-mnist).\n",
                "\u003cimg src=\"https://4.bp.blogspot.com/-OQZGt_5WqDo/Wa_Dfa4U15I/AAAAAAAAAUI/veRmAmUUKFA19dVw6XCOV2YLO6n-y_omwCLcBGAs/s400/out.jpg\" width=\"400px\" /\u003e\n",
                "\n",
                "Fashion-MNIST is a dataset of Zalando's article images‚Äîconsisting of a training set of 60,000 examples and a test set of 10,000 examples. Each example is a 28x28 grayscale image, associated with a label from 10 classes. Fashion-MNIST is intended to serve as a direct drop-in replacement for the original MNIST dataset for benchmarking machine learning algorithms. It shares the same image size and structure of training and testing splits.\n",
                "\n",
                "We will be using a very small fraction of the dataset. "
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Load entire Fashion-MNIST dataset from Tensorflow\n",
                "(x_train, y_train), (x_test, y_test) = tf.keras.datasets.fashion_mnist.load_data()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "These are the 10 class labels and the integer they map to in `y_train` and `y_test`."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Fashion-MNIST class labels\n",
                "labels = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n",
                "label2idx = {label: idx for idx, label in enumerate(labels)}\n",
                "label2idx"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Here's some examples from the dataset."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Fashion-MNIST examples\n",
                "fig, axs = plt.subplots(3,5, figsize=(9,7))\n",
                "for i, ax in enumerate(axs.ravel()):\n",
                "    ax.imshow(x_train[i], cmap=plt.cm.gray)\n",
                "    ax.set_xticks(())\n",
                "    ax.set_yticks(())\n",
                "    ax.set_title(labels[y_train[i]])\n",
                "plt.tight_layout()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Dataset size\n",
                "x_train.shape, x_test.shape"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Because we'd like a model we can train multiple times as we experiment during the lab, we will discard most of the training data. We'll do stratified splits to avoid biasing our sample. The classes are equally represented in the original dataset."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Throw away most of the training data to make things more difficult\n",
                "# We'll also toss most of the test data (writing it all to disk is slow on JupyterHub!)\n",
                "_, x_test, _, y_test = train_test_split(x_test, y_test, test_size=0.10, stratify=y_test)\n",
                "x_train, _, y_train, _ = train_test_split(x_train, y_train, train_size=0.02, stratify=y_train)\n",
                "x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.2, stratify=y_train)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Sample size\n",
                "x_train.shape, x_val.shape, x_test.shape"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "y_train[:15]"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "from keras.utils import to_categorical"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "y_train = to_categorical(y_train)\n",
                "y_val = to_categorical(y_val)\n",
                "y_test = to_categorical(y_test)\n",
                "y_train"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The `PIL` module (Python Image Library) is useful for taking the numpy arrays that currently represent the images and writing them to disk as jpeg files. "
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "from PIL import Image"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u003cdiv class='exercise'\u003e\u003cb\u003eConstruct a Classifier NN\u003c/b\u003e\u003c/div\u003e\u003c/br\u003e\n",
                "\n",
                "Let's built our first attempt at a clothing classifier and try to overfit.\n",
                "\n",
                "Note that Keras has a `Flatten` layer! We can use this to automatically turm input images into 1D arrays.\\\n",
                "(We'll see how to handle 2D input in future lectures and labs) "
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "import tensorflow as tf\n",
                "from tensorflow.keras.models import Model\n",
                "from tensorflow.keras.layers import  Activation, Input, BatchNormalization, Dense, Dropout, Flatten, GaussianNoise\n",
                "from tensorflow.keras.optimizers import Adam, SGD"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {
                "scrolled": true
            },
            "outputs": [],
            "source": [
                "# Overfit Fashion-MNIST Classifier\n",
                "input_dim = x_train.shape[1:]\n",
                "n_classes = y_train.shape[1]\n",
                "inputs = Input(shape=input_dim)\n",
                "\n",
                "# Flatten the inputs here to turn them into 1D arrays.\n",
                "# your code here\n",
                "flat = ... \n",
                "\n",
                "# Define the rest of your model\n",
                "# your code here\n",
                "\n",
                "# Compile it\n",
                "# your code here\n",
                "\n",
                "# And print the summary\n",
                "# your code here\n",
                ""
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u003cdiv class='exercise'\u003e\u003cb\u003eKeras Callbacks\u003c/b\u003e\u003c/div\u003e\u003c/br\u003e\n",
                "\n",
                "We'll use **early stopping** with short patience so we can call it quits early when it looks like we are overfitting so we can save time. More on this and other regularization techniques on Monday!"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, LambdaCallback\n",
                "\n",
                "es = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
                "callbacks = [es]"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u003cdiv class='exercise'\u003e\u003cb\u003eFit Model with Generator\u003c/b\u003e\u003c/div\u003e\u003c/br\u003e"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Let‚Äôs fit the model to the data using the generator. You can use `fit` as before but this time you will pass it generators rather than dataframes or numpy arrays.  \n",
                "\n",
                "Because the data is being generated endlessly, the Keras model needs to know how many samples to draw from the generator before declaring an epoch over. This is the role of the `steps_per_epoch` argument: after having drawn steps_per_epoch batches from the generator‚Äîthat is, after having run for steps_per_epoch gradient descent steps - the fitting process will go to the next epoch. \n",
                "\n",
                "When using `fit`, you can pass a validation_data argument, much as with the fit method. It‚Äôs important to note that this argument is allowed to be a data generator, but it could also be a tuple of Numpy arrays. If you pass a generator as validation_data, then this generator is expected to yield batches of validation data endlessly; thus you should also specify the validation_steps argument, which tells the process how many batches to draw from the validation generator for evaluation"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {
                "scrolled": true
            },
            "outputs": [],
            "source": [
                "%%time\n",
                "history = NN.fit(\n",
                "        x_train,\n",
                "        y_train,\n",
                "        epochs=30,\n",
                "        validation_data=(x_train, y_train),\n",
                "        callbacks=callbacks,\n",
                "        # workers=-1,\n",
                "        # use_multiprocessing=True,\n",
                "        verbose=1)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u003cdiv class='exercise'\u003e\u003cb\u003eEvaluate the Model\u003c/b\u003e\u003c/div\u003e\u003c/br\u003e"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "NN.evaluate(x_train, y_train)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "NN.evaluate(x_val, y_val)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "NN.evaluate(x_test, y_test)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Let‚Äôs plot the loss and accuracy of the model over the training and validation data during training:"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u003cdiv class='exercise'\u003e\u003cb\u003ePlot the Training History\u003c/b\u003e\u003c/div\u003e\u003c/br\u003e"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "fig, axs = plt.subplots(1,2, figsize=(10,4))\n",
                "print(f\"Final Val Acc: {history.history['val_accuracy'][-1]:.2f}\")\n",
                "axs[0].plot(history.history['accuracy'])\n",
                "axs[0].plot(history.history['val_accuracy'])\n",
                "axs[0].set_title('model accuracy')\n",
                "axs[0].set_ylabel('accuracy')\n",
                "axs[0].set_xlabel('epoch')\n",
                "axs[0].legend(['train', 'validation'], loc='upper left')\n",
                "\n",
                "# summarize history for loss\n",
                "axs[1].plot(history.history['loss'])\n",
                "axs[1].plot(history.history['val_loss'])\n",
                "axs[1].set_title('model loss')\n",
                "axs[1].set_ylabel('loss')\n",
                "axs[1].set_xlabel('epoch')\n",
                "axs[1].legend(['train', 'validation'], loc='upper left');"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "In the next lab we'll look at the idea of data generators which will allow us to create infinite variations on our training data in an attempt to improve generalization!"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                ""
            ]
        }
    ]
}
